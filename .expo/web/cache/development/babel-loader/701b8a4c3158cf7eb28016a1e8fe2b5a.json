{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from \"react\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { NavigationContext } from \"react-navigation\";\n\nvar SplashScreen = function SplashScreen(props) {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      animating = _useState2[0],\n      setAnimating = _useState2[1];\n\n  console.log(props.navigation);\n  useEffect(function () {\n    setTimeout(function () {\n      setAnimating(false);\n      AsyncStorage.getItem('user_id').then(function (value) {\n        return props.navigation.navigate(value === null ? 'Auth' : 'TabNavigationRoutes');\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }, 5000);\n  }, []);\n  return React.createElement(View, {\n    style: styles.screenView\n  }, React.createElement(Image, {\n    source: require(\"../../assets/GameNet.png\"),\n    style: styles.image\n  }), React.createElement(ActivityIndicator, {\n    animating: animating,\n    size: \"large\",\n    style: {\n      alignItems: \"center\",\n      height: 80\n    },\n    color: \"gray\",\n    style: {\n      opacity: 1\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  image: {\n    height: 350,\n    width: 350\n  },\n  screenView: {\n    alignItems: 'center',\n    backgroundColor: \"#0c3429\",\n    flex: 1,\n    justifyContent: \"center\"\n  }\n});\nexport default SplashScreen;","map":{"version":3,"sources":["C:/Users/jondr/GamingApp/src/screens/SplashScreen.js"],"names":["React","useState","useEffect","AsyncStorage","NavigationContext","SplashScreen","props","animating","setAnimating","console","log","navigation","setTimeout","getItem","then","value","navigate","catch","error","styles","screenView","require","image","alignItems","height","opacity","StyleSheet","create","width","backgroundColor","flex","justifyContent"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;;;;AAOA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,SAASC,iBAAT,QAAkC,kBAAlC;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAW;AAC5B,kBAAkCL,QAAQ,CAAC,IAAD,CAA1C;AAAA;AAAA,MAAOM,SAAP;AAAA,MAAkBC,YAAlB;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACK,UAAlB;AAGAT,EAAAA,SAAS,CAAC,YAAM;AACZU,IAAAA,UAAU,CAAC,YAAM;AACbJ,MAAAA,YAAY,CAAC,KAAD,CAAZ;AAIAL,MAAAA,YAAY,CAACU,OAAb,CAAqB,SAArB,EAAgCC,IAAhC,CAAqC,UAACC,KAAD;AAAA,eACjCT,KAAK,CAACK,UAAN,CAAiBK,QAAjB,CACAD,KAAK,KAAK,IAAV,GAAiB,MAAjB,GAA0B,qBAD1B,CADiC;AAAA,OAArC,EAIEE,KAJF,CAIQ,UAASC,KAAT,EAAgB;AACpBT,QAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACH,OAND;AAOH,KAZS,EAYP,IAZO,CAAV;AAaH,GAdQ,EAcN,EAdM,CAAT;AAgBA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC;AAApB,KACI,oBAAC,KAAD;AACI,IAAA,MAAM,EAAEC,OAAO,4BADnB;AAEI,IAAA,KAAK,EAAEF,MAAM,CAACG;AAFlB,IADJ,EAKI,oBAAC,iBAAD;AACI,IAAA,SAAS,EAAEf,SADf;AAEI,IAAA,IAAI,EAAC,OAFT;AAGI,IAAA,KAAK,EAAE;AAACgB,MAAAA,UAAU,EAAE,QAAb;AAAuBC,MAAAA,MAAM,EAAE;AAA/B,KAHX;AAII,IAAA,KAAK,EAAC,MAJV;AAKI,IAAA,KAAK,EAAE;AAACC,MAAAA,OAAO,EAAE;AAAV;AALX,IALJ,CADJ;AAeH,CApCD;;AAsCA,IAAMN,MAAM,GAAGO,UAAU,CAACC,MAAX,CAAkB;AAC7BL,EAAAA,KAAK,EAAE;AACHE,IAAAA,MAAM,EAAE,GADL;AAEHI,IAAAA,KAAK,EAAE;AAFJ,GADsB;AAK7BR,EAAAA,UAAU,EAAE;AACRG,IAAAA,UAAU,EAAE,QADJ;AAERM,IAAAA,eAAe,EAAE,SAFT;AAGRC,IAAAA,IAAI,EAAE,CAHE;AAIRC,IAAAA,cAAc,EAAE;AAJR;AALiB,CAAlB,CAAf;AAaA,eAAe1B,YAAf","sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport { \r\n    ActivityIndicator,\r\n    View,\r\n    StyleSheet,\r\n    Image\r\n } from \"react-native\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport { NavigationContext } from \"react-navigation\";\r\n\r\nconst SplashScreen = (props) => {\r\n    const [animating, setAnimating] = useState(true);\r\n    console.log(props.navigation)\r\n\r\n    //the function will only excecute when the component is first rendered \r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setAnimating(false);\r\n            //Check if the user_id is set or not\r\n            //if not, them the user needs to sign in\r\n            //otherwise, send them to the SavedGamesScreen\r\n            AsyncStorage.getItem('user_id').then((value) =>\r\n                props.navigation.navigate(\r\n                value === null ? 'Auth' : 'TabNavigationRoutes'\r\n                )\r\n            ).catch(function(error) {\r\n                console.log(error);\r\n            });\r\n        }, 5000)\r\n    }, []);\r\n\r\n    return (\r\n        <View style={styles.screenView}>\r\n            <Image\r\n                source={require('../../assets/GameNet.png')}\r\n                style={styles.image}\r\n            />\r\n            <ActivityIndicator \r\n                animating={animating}\r\n                size=\"large\"\r\n                style={{alignItems: \"center\", height: 80}}\r\n                color=\"gray\"\r\n                style={{opacity: 1}}\r\n            />\r\n        </View>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    image: {\r\n        height: 350,\r\n        width: 350\r\n    },\r\n    screenView: {\r\n        alignItems: 'center',\r\n        backgroundColor: \"#0c3429\",\r\n        flex: 1,\r\n        justifyContent: \"center\"\r\n    }\r\n});\r\n\r\nexport default SplashScreen;"]},"metadata":{},"sourceType":"module"}